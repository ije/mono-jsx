import { build, stop } from "https://deno.land/x/esbuild@v0.25.0/mod.js";

async function buildRuntime(name: string): Promise<string> {
  const ret = await build({
    entryPoints: [`./runtime/${name}.ts`],
    format: "esm",
    target: "es2022",
    write: false,
    minify: true,
  });
  if (ret.errors.length > 0) {
    throw new Error(ret.errors[0].text);
  }
  return ret.outputFiles[0].text.trim();
}

async function buildRuntimeComponent(name: string): Promise<string> {
  const ret = await build({
    stdin: {
      contents: `export { ${name}} from "./runtime/utils.ts";`,
      resolveDir: "./",
    },
    format: "esm",
    target: "es2022",
    write: false,
    bundle: true,
    minify: true,
  });
  if (ret.errors.length > 0) {
    throw new Error(ret.errors[0].text);
  }
  return "var " + name + "=(()=>{"
    + ret.outputFiles[0].text.trim().replace(/export\{(\w+) as (\w+)\};$/, "return $1;")
    + "})();";
}

async function buildPackageModule(name: string, format: "esm" | "cjs" = "esm") {
  const entryPointPath = `./${name}.ts`;
  const outfile = `./${name}.` + (format === "esm" ? "mjs" : "cjs");
  await build({
    entryPoints: [entryPointPath],
    outfile,
    format,
    target: "esnext",
    minify: false,
    bundle: true,
  });
  return await Deno.lstat(outfile);
}

if (import.meta.main) {
  const start = performance.now();
  const runtime_state_js = await buildRuntime("state");
  const runtime_suspense_js = await buildRuntime("suspense");
  const runtime_component_cx = await buildRuntimeComponent("cx");
  const runtime_component_styleToCSS = await buildRuntimeComponent("styleToCSS");

  await Deno.writeTextFile(
    "./runtime/index.ts",
    [
      "// generated by build.ts, do not edit",
      `export const RUNTIME_STATE_JS = ${JSON.stringify(runtime_state_js.replaceAll('"', "'"))};`,
      `export const RUNTIME_SUSPENSE_JS = ${JSON.stringify(runtime_suspense_js.replaceAll('"', "'"))};`,
      `export const RUNTIME_COMPONENTS_JS = ${
        JSON.stringify({
          cx: runtime_component_cx.replaceAll('"', "'"),
          styleToCSS: runtime_component_styleToCSS.replaceAll('"', "'"),
        })
      };`,
      "", // trailing newline
    ].join("\n"),
  );
  console.log(`· RUNTIME_STATE_JS %c(${runtime_state_js.length} bytes)`, "color:grey");
  console.log(`· RUNTIME_SUSPENSE_JS %c(${runtime_suspense_js.length} bytes)`, "color:grey");

  for (const moduleName of ["index", "jsx-runtime"]) {
    {
      const { size } = await buildPackageModule(moduleName, "esm");
      console.log(`· ${moduleName}.mjs %c(${size.toLocaleString()} bytes)`, "color:grey");
    }
  }

  console.log("%cBuild complete! (%d ms)", "color:grey", performance.now() - start);
  stop();
}
