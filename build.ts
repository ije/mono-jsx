import { build, stop } from "https://deno.land/x/esbuild@v0.23.1/mod.js";

async function buildRuntime(entryPoint: string): Promise<string> {
  const ret = await build({
    entryPoints: [`./runtime/${entryPoint}.ts`],
    format: "esm",
    target: "es2018",
    write: false,
    minify: true,
  });
  if (ret.errors.length > 0) {
    throw new Error(ret.errors[0].text);
  }
  return ret.outputFiles[0].text.trim();
}

async function buildPackageModule(name: string) {
  const entryPointPath = `./${name}.ts`;
  await build({
    entryPoints: [entryPointPath],
    outfile: `./${name}.mjs`,
    format: "esm",
    target: "esnext",
    minify: false,
    bundle: true,
  });
  return await Deno.lstat(`./${name}.mjs`);
}

if (import.meta.main) {
  const start = performance.now();
  const runtime_state = await buildRuntime("state");
  const runtime_suspense = await buildRuntime("suspense");

  await Deno.writeTextFile(
    "./runtime/index.ts",
    [
      "// generated by build.ts, do not edit",
      `export const RUNTIME_STATE = ${JSON.stringify(runtime_state.replaceAll('"', "'"))};`,
      `export const RUNTIME_SUSPENSE = ${JSON.stringify(runtime_suspense.replaceAll('"', "'"))};`,
      "", // trailing newline
    ].join("\n"),
  );
  console.log(`- runtime(state) %c(${runtime_state.length} bytes)`, "color:grey");
  console.log(`- runtime(suspense) %c(${runtime_suspense.length} bytes)`, "color:grey");

  for (const name of ["index.ts", "jsx-runtime.ts"]) {
    const moduleName = name.replace(/\.ts$/, "");
    const { size } = await buildPackageModule(moduleName);
    console.log(`- ${moduleName}.mjs %c(${size.toLocaleString()} bytes)`, "color:grey");
  }

  console.log("%cBuild complete! (%d ms)", "color:grey", performance.now() - start);
  stop();
}
