import { build, stop } from "https://deno.land/x/esbuild@v0.25.0/mod.js";

async function buildRuntime(name: string): Promise<string> {
  const ret = await build({
    entryPoints: [`./runtime/${name}.ts`],
    format: "esm",
    target: "es2022",
    write: false,
    minify: true,
  });
  if (ret.errors.length > 0) {
    throw new Error(ret.errors[0].text);
  }
  return ret.outputFiles[0].text.trim();
}

async function buildRuntimeComponent(name: string): Promise<string> {
  const ret = await build({
    stdin: {
      contents: `export { ${name} } from "./runtime/utils.ts";`,
      resolveDir: "./",
    },
    format: "esm",
    target: "es2022",
    write: false,
    bundle: true,
    minify: true,
  });
  if (ret.errors.length > 0) {
    throw new Error(ret.errors[0].text);
  }
  const js = ret.outputFiles[0].text.trim().replace(/export\{(\w+) as (\w+)\};$/, "return $1;");
  return "var " + name + "=(()=>{" + js + "})();";
}

async function buildPackageModule(name: string, format: "esm" | "cjs" = "esm") {
  const entryPointPath = `./${name}.ts`;
  const outfile = `./${name}.` + (format === "esm" ? "mjs" : "cjs");
  await build({
    entryPoints: [entryPointPath],
    outfile,
    format,
    target: "esnext",
    minify: false,
    bundle: true,
  });
  return await Deno.lstat(outfile);
}

function stringLit(str: string): string {
  return "`" + str + "`";
}

if (import.meta.main) {
  const start = performance.now();
  const runtime_state_js = await buildRuntime("state");
  const runtime_suspense_js = await buildRuntime("suspense");
  const runtime_component_cx = await buildRuntimeComponent("cx");
  const runtime_component_styleToCSS = await buildRuntimeComponent("styleToCSS");
  const runtime_component_event = [
    `window.$emit=(evt,el,fn,fc)=>fn.call(window.$state?.(fc)??el,evt);`,
    `window.$onsubmit=(evt,el,fn,fc)=>{evt.preventDefault();fn.call(window.$state?.(fc)??el,new FormData(el),evt)};`,
  ].join("");

  await Deno.writeTextFile(
    "./runtime/index.ts",
    [
      `// generated by build.ts, do not edit`,
      ``,
      `/** state.js (${runtime_state_js.length} bytes) */`,
      `export const RUNTIME_STATE_JS = ${stringLit(runtime_state_js)};`,
      ``,
      `/** suspense.js (${runtime_suspense_js.length} bytes) */`,
      `export const RUNTIME_SUSPENSE_JS = ${stringLit(runtime_suspense_js)};`,
      ``,
      `/** runtime components */`,
      `export const RUNTIME_COMPONENTS_JS = {`,
      `  /** cx.js (${runtime_component_cx.length} bytes) */`,
      `  cx: ${stringLit(runtime_component_cx)},`,
      `  /** styleToCSS.js (${runtime_component_styleToCSS.length} bytes) */`,
      `  styleToCSS: ${stringLit(runtime_component_styleToCSS)},`,
      `  /** event.js (${runtime_component_event.length} bytes) */`,
      `  event: ${stringLit(runtime_component_event)}`,
      `};`,
      ``,
    ].join("\n"),
  );
  console.log(`· RUNTIME_STATE_JS %c(${runtime_state_js.length} bytes)`, "color:grey");
  console.log(`· RUNTIME_SUSPENSE_JS %c(${runtime_suspense_js.length} bytes)`, "color:grey");

  for (const moduleName of ["index", "jsx-runtime"]) {
    {
      const { size } = await buildPackageModule(moduleName, "esm");
      console.log(`· ${moduleName}.mjs %c(${size.toLocaleString()} bytes)`, "color:grey");
    }
  }

  console.log("%cBuild complete! (%d ms)", "color:grey", performance.now() - start);
  stop();
}
