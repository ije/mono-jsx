import { build, stop } from "https://deno.land/x/esbuild@v0.23.1/mod.js";

async function buildRuntime(entryPoint: string): Promise<string> {
  const ret = await build({
    entryPoints: [`./runtime/${entryPoint}.ts`],
    format: "esm",
    target: "esnext",
    write: false,
    minify: true,
  });
  if (ret.errors.length > 0) {
    throw new Error(ret.errors[0].text);
  }
  return ret.outputFiles[0].text.trim();
}

async function buildPackageModule(name: string) {
  const entryPointPath = `./${name}.ts`;
  await build({
    entryPoints: [entryPointPath],
    outfile: `./${name}.mjs`,
    format: "esm",
    target: "esnext",
    minify: false,
    bundle: true,
    plugins: [
      {
        name: "rename-ts-extension",
        setup(build) {
          build.onResolve({ filter: /\.ts$/ }, (args) => {
            if (args.path !== entryPointPath && args.path.endsWith("/jsx.ts")) {
              return { path: args.path.replace(/\.ts$/, ".mjs"), external: true };
            }
            return;
          });
        },
      },
    ],
  });
  return await Deno.lstat(`./${name}.mjs`);
}

if (import.meta.main) {
  const start = performance.now();

  await Deno.writeTextFile(
    "./runtime/index.ts",
    [
      "// generated by build.ts, do not edit",
      `export const RUNTIME_STATE = ${JSON.stringify(await buildRuntime("state"))};`,
      `export const RUNTIME_SUSPENSE = ${JSON.stringify(await buildRuntime("suspense"))};`,
      "", // trailing newline
    ].join("\n"),
  );

  for (const name of ["jsx.ts", "jsx-runtime.ts"]) {
    const moduleName = name.replace(/\.ts$/, "");
    const { size } = await buildPackageModule(moduleName);
    console.log(`- ${moduleName}.mjs %c(${size.toLocaleString()} bytes)`, "color:grey");
  }

  console.log("%cBuild complete! (%d ms)", "color:grey", performance.now() - start);
  stop();
}
